# MediPlant - Medicinal Plant E-commerce Platform

Welcome to MediPlant, a comprehensive e-commerce platform for medicinal plants and herbal products.

## Project Structure

```
mediplant/
├── app/
│   ├── __init__.py                 # Flask app factory
│   ├── models.py                   # Database models
│   ├── routes/
│   │   ├── __init__.py
│   │   ├── auth.py                 # Authentication routes
│   │   ├── admin.py                # Admin panel routes
│   │   ├── supplier.py             # Supplier dashboard routes
│   │   ├── consumer.py             # Consumer/user routes
│   │   ├── product.py              # Product management routes
│   │   ├── order.py                # Order management routes
│   │   └── payment.py              # Payment processing routes
│   ├── templates/
│   │   ├── base.html               # Base template
│   │   ├── auth/                   # Authentication templates
│   │   │   ├── login.html
│   │   │   ├── register.html
│   │   │   └── forgot_password.html
│   │   ├── admin/                  # Admin templates
│   │   │   ├── dashboard.html
│   │   │   ├── users.html
│   │   │   ├── products.html
│   │   │   ├── orders.html
│   │   │   └── analytics.html
│   │   ├── supplier/               # Supplier templates
│   │   │   ├── dashboard.html
│   │   │   ├── products.html
│   │   │   ├── orders.html
│   │   │   └── profile.html
│   │   ├── consumer/               # Consumer templates
│   │   │   ├── home.html
│   │   │   ├── products.html
│   │   │   ├── product_detail.html
│   │   │   ├── cart.html
│   │   │   ├── checkout.html
│   │   │   ├── orders.html
│   │   │   └── profile.html
│   │   ├── order/                  # Order templates
│   │   │   ├── detail.html
│   │   │   └── track.html
│   │   └── payment/                # Payment templates
│   │       └── checkout.html
│   ├── static/
│   │   ├── css/
│   │   │   ├── main.css
│   │   │   ├── admin.css
│   │   │   ├── supplier.css
│   │   │   └── consumer.css
│   │   ├── js/
│   │   │   ├── main.js
│   │   │   ├── admin.js
│   │   │   ├── supplier.js
│   │   │   ├── consumer.js
│   │   │   └── payment.js
│   │   └── images/
│   │       ├── products/           # Product images
│   │       ├── users/              # User profile images
│   │       └── assets/             # Site assets (logo, icons, etc.)
│   └── utils/
│       ├── __init__.py
│       ├── helpers.py              # Helper functions
│       ├── decorators.py           # Custom decorators
│       └── seed_data.py            # Database seeding utilities
├── migrations/                     # Database migration files
├── tests/                          # Test files
│   ├── __init__.py
│   ├── test_auth.py
│   ├── test_products.py
│   └── test_orders.py
├── config.py                       # Configuration settings
├── run.py                          # Application entry point
├── requirements.txt                # Python dependencies
├── README.md                       # Project documentation
├── scheema.sql                     # Database schema
├── ER_Diagram.md                   # Entity Relationship Diagram
└── .env.example                    # Environment variables example
```

## Quick Start

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd mediplant
   ```

2. **Create virtual environment**
   ```bash
   python -m venv venv
   venv\Scripts\activate  # Windows
   # or
   source venv/bin/activate  # Linux/Mac
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Set up environment variables**
   ```bash
   copy .env.example .env
   # Edit .env with your configuration
   ```

5. **Initialize database**
   ```bash
   flask db init
   flask db migrate -m "Initial migration"
   flask db upgrade
   flask deploy
   ```

6. **Create admin user**
   ```bash
   flask create-admin
   ```

7. **Run the application**
   ```bash
   python run.py
   ```

## Environment Variables

Create a `.env` file in the root directory with the following variables:

```bash
# Flask Configuration
SECRET_KEY=your-secret-key-here
FLASK_CONFIG=development

# Database Configuration
DATABASE_URL=mysql+pymysql://username:password@localhost/mediplant_db

# Email Configuration
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password

# Payment Gateway Configuration
RAZORPAY_KEY_ID=your-razorpay-key-id
RAZORPAY_KEY_SECRET=your-razorpay-key-secret

# AWS Configuration (optional)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_S3_BUCKET=your-s3-bucket-name

# Redis Configuration (optional)
REDIS_URL=redis://localhost:6379/0
```

## Features

### Multi-Role System
- **Admin**: Complete system management, user management, analytics
- **Supplier**: Product management, order fulfillment, inventory tracking
- **Consumer**: Product browsing, purchasing, reviews, order tracking

### Product Management
- Comprehensive product catalog with categories
- Product variants (size, quantity, packaging)
- Inventory management
- Image upload and management
- SEO-friendly URLs

### Order Management
- Shopping cart functionality
- Multi-supplier order splitting
- Order tracking and status updates
- Invoice generation

### Payment Integration
- Razorpay payment gateway
- PayPal integration
- Cash on Delivery (COD)
- Secure payment processing

### Additional Features
- Product reviews and ratings
- Wishlist functionality
- Advanced search and filtering
- Analytics and reporting
- Email notifications
- Mobile responsive design

## API Endpoints

### Authentication
- `POST /auth/login` - User login
- `POST /auth/register` - User registration
- `POST /auth/logout` - User logout
- `POST /auth/forgot-password` - Password reset

### Products
- `GET /api/products` - List products
- `GET /api/products/<id>` - Get product details
- `POST /api/products` - Create product (supplier/admin)
- `PUT /api/products/<id>` - Update product
- `DELETE /api/products/<id>` - Delete product

### Orders
- `GET /api/orders` - List user orders
- `POST /api/orders` - Create order
- `GET /api/orders/<id>` - Get order details
- `PUT /api/orders/<id>/cancel` - Cancel order

### Cart
- `GET /api/cart` - Get cart items
- `POST /api/cart` - Add item to cart
- `PUT /api/cart/<id>` - Update cart item
- `DELETE /api/cart/<id>` - Remove cart item

## Database Schema

The application uses MySQL database with the following main tables:
- `users` - User accounts
- `roles` - User roles (admin, supplier, consumer)
- `products` - Product catalog
- `categories` - Product categories
- `orders` - Order information
- `order_items` - Order line items
- `payments` - Payment records
- `reviews` - Product reviews
- `shopping_cart` - Shopping cart items

For detailed schema, see `scheema.sql` file.

## Testing

Run tests using pytest:

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=app

# Run specific test file
pytest tests/test_auth.py
```

## Deployment

### Production Setup

1. **Update configuration**
   ```bash
   export FLASK_CONFIG=production
   ```

2. **Install production server**
   ```bash
   pip install gunicorn
   ```

3. **Run with Gunicorn**
   ```bash
   gunicorn -w 4 -b 0.0.0.0:8000 run:app
   ```

### Docker Deployment

```bash
# Build Docker image
docker build -t mediplant .

# Run container
docker run -p 5000:5000 mediplant
```

## Security Features

- Password hashing with bcrypt
- CSRF protection
- SQL injection prevention
- XSS protection
- Rate limiting
- Secure session management
- Email verification
- Role-based access control

## Performance Optimization

- Database query optimization
- Image compression
- Caching with Redis
- CDN integration
- Lazy loading
- Database indexing

## Contributing

1. Fork the repository
2. Create feature branch (`git checkout -b feature/new-feature`)
3. Commit changes (`git commit -am 'Add new feature'`)
4. Push to branch (`git push origin feature/new-feature`)
5. Create Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Support

For support and questions:
- Email: support@mediplant.com
- Documentation: [Project Wiki]
- Issues: [GitHub Issues]

## Changelog

### Version 1.0.0
- Initial release
- Multi-role authentication system
- Product catalog management
- Order processing
- Payment integration
- Admin dashboard
- Supplier portal
- Consumer interface
